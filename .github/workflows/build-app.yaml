name: Build App

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    name: Release App
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.release_tag.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate release tag
        id: release_tag
        run: |
          VERSION=$(date +'%Y.%m.%d.%H%M')
          echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
        env:
          TZ: "Asia/Tokyo"

      - name: Release
        run: |
          gh release create ${{ steps.release_tag.outputs.VERSION }} \
            --title "Release ${{ steps.release_tag.outputs.VERSION }}" \
            --generate-notes \
            --prerelease \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build App for ${{ matrix.os }}
    needs: release
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          # - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        shell: bash
      - name: Install Ubuntu Dependencies
        run: sudo apt update && sudo apt-get install -y build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libsoup-3.0-dev javascriptcoregtk-4.1 libwebkit2gtk-4.1-dev libudev-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Build
        run: pnpm tauri build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: ./src-tauri/target/release/bundle

      - name: Zip the release file
        run: |
          cd ./src-tauri/target/release
          zip -r bundle-${{ matrix.os }}.zip bundle
        shell: bash
        if: matrix.os != 'windows-latest'

      - name: Zip the file (windows)
        run: |
          cd ./src-tauri/target/release
          Compress-Archive -Path bundle -DestinationPath bundle-${{ matrix.os }}.zip
        shell: pwsh
        if: matrix.os == 'windows-latest'

      - name: Upload release
        run: |
          gh release upload ${{ needs.release.outputs.release_tag }} \
            ./src-tauri/target/release/bundle-${{ matrix.os }}.zip \
            --clobber \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

  finalize-release:
    name: Finalize Release
    needs: [release, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update release to formal release
        run: |
          gh release edit ${{ needs.release.outputs.release_tag }} \
            --prerelease=false \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
