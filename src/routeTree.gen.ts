/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as ReservationsIndexImport } from './routes/reservations/index'
import { Route as PnrsIndexImport } from './routes/pnrs/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as FlightReservationsIndexImport } from './routes/flight-reservations/index'
import { Route as PnrsSearchImport } from './routes/pnrs/search'
import { Route as PnrsNewImport } from './routes/pnrs/new'
import { Route as PnrsDetailsImport } from './routes/pnrs/details'
import { Route as UsersOtherIndexImport } from './routes/users/other/index'
import { Route as UsersMeIndexImport } from './routes/users/me/index'
import { Route as UsersInviteIndexImport } from './routes/users/invite/index'
import { Route as ReservationsNewIndexImport } from './routes/reservations/new/index'
import { Route as FlightReservationsNewIndexImport } from './routes/flight-reservations/new/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const ReservationsIndexRoute = ReservationsIndexImport.update({
  id: '/reservations/',
  path: '/reservations/',
  getParentRoute: () => rootRoute,
} as any)

const PnrsIndexRoute = PnrsIndexImport.update({
  id: '/pnrs/',
  path: '/pnrs/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const FlightReservationsIndexRoute = FlightReservationsIndexImport.update({
  id: '/flight-reservations/',
  path: '/flight-reservations/',
  getParentRoute: () => rootRoute,
} as any)

const PnrsSearchRoute = PnrsSearchImport.update({
  id: '/pnrs/search',
  path: '/pnrs/search',
  getParentRoute: () => rootRoute,
} as any)

const PnrsNewRoute = PnrsNewImport.update({
  id: '/pnrs/new',
  path: '/pnrs/new',
  getParentRoute: () => rootRoute,
} as any)

const PnrsDetailsRoute = PnrsDetailsImport.update({
  id: '/pnrs/details',
  path: '/pnrs/details',
  getParentRoute: () => rootRoute,
} as any)

const UsersOtherIndexRoute = UsersOtherIndexImport.update({
  id: '/users/other/',
  path: '/users/other/',
  getParentRoute: () => rootRoute,
} as any)

const UsersMeIndexRoute = UsersMeIndexImport.update({
  id: '/users/me/',
  path: '/users/me/',
  getParentRoute: () => rootRoute,
} as any)

const UsersInviteIndexRoute = UsersInviteIndexImport.update({
  id: '/users/invite/',
  path: '/users/invite/',
  getParentRoute: () => rootRoute,
} as any)

const ReservationsNewIndexRoute = ReservationsNewIndexImport.update({
  id: '/reservations/new/',
  path: '/reservations/new/',
  getParentRoute: () => rootRoute,
} as any)

const FlightReservationsNewIndexRoute = FlightReservationsNewIndexImport.update(
  {
    id: '/flight-reservations/new/',
    path: '/flight-reservations/new/',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/pnrs/details': {
      id: '/pnrs/details'
      path: '/pnrs/details'
      fullPath: '/pnrs/details'
      preLoaderRoute: typeof PnrsDetailsImport
      parentRoute: typeof rootRoute
    }
    '/pnrs/new': {
      id: '/pnrs/new'
      path: '/pnrs/new'
      fullPath: '/pnrs/new'
      preLoaderRoute: typeof PnrsNewImport
      parentRoute: typeof rootRoute
    }
    '/pnrs/search': {
      id: '/pnrs/search'
      path: '/pnrs/search'
      fullPath: '/pnrs/search'
      preLoaderRoute: typeof PnrsSearchImport
      parentRoute: typeof rootRoute
    }
    '/flight-reservations/': {
      id: '/flight-reservations/'
      path: '/flight-reservations'
      fullPath: '/flight-reservations'
      preLoaderRoute: typeof FlightReservationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/pnrs/': {
      id: '/pnrs/'
      path: '/pnrs'
      fullPath: '/pnrs'
      preLoaderRoute: typeof PnrsIndexImport
      parentRoute: typeof rootRoute
    }
    '/reservations/': {
      id: '/reservations/'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/flight-reservations/new/': {
      id: '/flight-reservations/new/'
      path: '/flight-reservations/new'
      fullPath: '/flight-reservations/new'
      preLoaderRoute: typeof FlightReservationsNewIndexImport
      parentRoute: typeof rootRoute
    }
    '/reservations/new/': {
      id: '/reservations/new/'
      path: '/reservations/new'
      fullPath: '/reservations/new'
      preLoaderRoute: typeof ReservationsNewIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/invite/': {
      id: '/users/invite/'
      path: '/users/invite'
      fullPath: '/users/invite'
      preLoaderRoute: typeof UsersInviteIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/me/': {
      id: '/users/me/'
      path: '/users/me'
      fullPath: '/users/me'
      preLoaderRoute: typeof UsersMeIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/other/': {
      id: '/users/other/'
      path: '/users/other'
      fullPath: '/users/other'
      preLoaderRoute: typeof UsersOtherIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pnrs/details': typeof PnrsDetailsRoute
  '/pnrs/new': typeof PnrsNewRoute
  '/pnrs/search': typeof PnrsSearchRoute
  '/flight-reservations': typeof FlightReservationsIndexRoute
  '/home': typeof HomeIndexRoute
  '/pnrs': typeof PnrsIndexRoute
  '/reservations': typeof ReservationsIndexRoute
  '/users': typeof UsersIndexRoute
  '/flight-reservations/new': typeof FlightReservationsNewIndexRoute
  '/reservations/new': typeof ReservationsNewIndexRoute
  '/users/invite': typeof UsersInviteIndexRoute
  '/users/me': typeof UsersMeIndexRoute
  '/users/other': typeof UsersOtherIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pnrs/details': typeof PnrsDetailsRoute
  '/pnrs/new': typeof PnrsNewRoute
  '/pnrs/search': typeof PnrsSearchRoute
  '/flight-reservations': typeof FlightReservationsIndexRoute
  '/home': typeof HomeIndexRoute
  '/pnrs': typeof PnrsIndexRoute
  '/reservations': typeof ReservationsIndexRoute
  '/users': typeof UsersIndexRoute
  '/flight-reservations/new': typeof FlightReservationsNewIndexRoute
  '/reservations/new': typeof ReservationsNewIndexRoute
  '/users/invite': typeof UsersInviteIndexRoute
  '/users/me': typeof UsersMeIndexRoute
  '/users/other': typeof UsersOtherIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/pnrs/details': typeof PnrsDetailsRoute
  '/pnrs/new': typeof PnrsNewRoute
  '/pnrs/search': typeof PnrsSearchRoute
  '/flight-reservations/': typeof FlightReservationsIndexRoute
  '/home/': typeof HomeIndexRoute
  '/pnrs/': typeof PnrsIndexRoute
  '/reservations/': typeof ReservationsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/flight-reservations/new/': typeof FlightReservationsNewIndexRoute
  '/reservations/new/': typeof ReservationsNewIndexRoute
  '/users/invite/': typeof UsersInviteIndexRoute
  '/users/me/': typeof UsersMeIndexRoute
  '/users/other/': typeof UsersOtherIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pnrs/details'
    | '/pnrs/new'
    | '/pnrs/search'
    | '/flight-reservations'
    | '/home'
    | '/pnrs'
    | '/reservations'
    | '/users'
    | '/flight-reservations/new'
    | '/reservations/new'
    | '/users/invite'
    | '/users/me'
    | '/users/other'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pnrs/details'
    | '/pnrs/new'
    | '/pnrs/search'
    | '/flight-reservations'
    | '/home'
    | '/pnrs'
    | '/reservations'
    | '/users'
    | '/flight-reservations/new'
    | '/reservations/new'
    | '/users/invite'
    | '/users/me'
    | '/users/other'
  id:
    | '__root__'
    | '/'
    | '/pnrs/details'
    | '/pnrs/new'
    | '/pnrs/search'
    | '/flight-reservations/'
    | '/home/'
    | '/pnrs/'
    | '/reservations/'
    | '/users/'
    | '/flight-reservations/new/'
    | '/reservations/new/'
    | '/users/invite/'
    | '/users/me/'
    | '/users/other/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PnrsDetailsRoute: typeof PnrsDetailsRoute
  PnrsNewRoute: typeof PnrsNewRoute
  PnrsSearchRoute: typeof PnrsSearchRoute
  FlightReservationsIndexRoute: typeof FlightReservationsIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  PnrsIndexRoute: typeof PnrsIndexRoute
  ReservationsIndexRoute: typeof ReservationsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  FlightReservationsNewIndexRoute: typeof FlightReservationsNewIndexRoute
  ReservationsNewIndexRoute: typeof ReservationsNewIndexRoute
  UsersInviteIndexRoute: typeof UsersInviteIndexRoute
  UsersMeIndexRoute: typeof UsersMeIndexRoute
  UsersOtherIndexRoute: typeof UsersOtherIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PnrsDetailsRoute: PnrsDetailsRoute,
  PnrsNewRoute: PnrsNewRoute,
  PnrsSearchRoute: PnrsSearchRoute,
  FlightReservationsIndexRoute: FlightReservationsIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  PnrsIndexRoute: PnrsIndexRoute,
  ReservationsIndexRoute: ReservationsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  FlightReservationsNewIndexRoute: FlightReservationsNewIndexRoute,
  ReservationsNewIndexRoute: ReservationsNewIndexRoute,
  UsersInviteIndexRoute: UsersInviteIndexRoute,
  UsersMeIndexRoute: UsersMeIndexRoute,
  UsersOtherIndexRoute: UsersOtherIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pnrs/details",
        "/pnrs/new",
        "/pnrs/search",
        "/flight-reservations/",
        "/home/",
        "/pnrs/",
        "/reservations/",
        "/users/",
        "/flight-reservations/new/",
        "/reservations/new/",
        "/users/invite/",
        "/users/me/",
        "/users/other/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/pnrs/details": {
      "filePath": "pnrs/details.tsx"
    },
    "/pnrs/new": {
      "filePath": "pnrs/new.tsx"
    },
    "/pnrs/search": {
      "filePath": "pnrs/search.tsx"
    },
    "/flight-reservations/": {
      "filePath": "flight-reservations/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/pnrs/": {
      "filePath": "pnrs/index.tsx"
    },
    "/reservations/": {
      "filePath": "reservations/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/flight-reservations/new/": {
      "filePath": "flight-reservations/new/index.tsx"
    },
    "/reservations/new/": {
      "filePath": "reservations/new/index.tsx"
    },
    "/users/invite/": {
      "filePath": "users/invite/index.tsx"
    },
    "/users/me/": {
      "filePath": "users/me/index.tsx"
    },
    "/users/other/": {
      "filePath": "users/other/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
